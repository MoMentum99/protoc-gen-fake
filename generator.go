package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
)

func GenerateFake(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_fake.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-fake. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// Import the fake package
	g.P("import (")
	g.P(`    "github.com/ao-labs/protoc-gen-fake/pkg/fake"`)
	g.P(")")
	g.P()

	// Generate responses for each service
	for _, service := range file.Services {
		g.P("// Default responses for ", service.GoName)
		g.P("var Default", service.GoName, "Responses = map[string]fake.Response{")

		for _, method := range service.Methods {
			g.P(`    "`, buildMethodPath(service, method), `": {`)
			g.P(`        Method: "`, buildMethodPath(service, method), `",`)
			g.P(`        Response: &`, method.Output.GoIdent.GoName, `{`)
			generateDefaultResponseFields(g, method.Output)
			g.P("        },")
			g.P("    },")
		}

		g.P("}")
		g.P()
	}
}

func generateDefaultResponseFields(g *protogen.GeneratedFile, msg *protogen.Message) {
	for _, field := range msg.Fields {
		// Skip if field is oneof
		if field.Oneof != nil {
			continue
		}

		// Generate value
		value := getDefaultValueForField(field)
		if value != "" {
			g.P("            ", field.GoName, ": ", value, ",")
		}
	}
}

func buildMethodPath(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("/%s.%s/%s", service.Desc.Parent().FullName(), service.GoName, method.GoName)
}
